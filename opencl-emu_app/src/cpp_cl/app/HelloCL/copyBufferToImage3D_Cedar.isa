ShaderType = IL_SHADER_COMPUTE
TargetChip = c
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
fConstantsAvailable = 0
iConstantsAvailable = 0
bConstantsAvailable = 0
u32SCOptions[0] = 0x01A00000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x00202000 SCOption_R600_ERROR_ON_DOUBLE_MEMEXP SCOption_SET_VPM_FOR_SCATTER
u32SCOptions[2] = 0x00000044 SCOption_R8XX_CF_ALU_STACK_ENTRY_WORKAROUND SCOption_R800_UAV_NONUAV_SYNC_WORKAROUND_BUG216513_1

; --------  Disassembly --------------------
00 ALU_PUSH_BEFORE: ADDR(96) CNT(21) KCACHE0(CB0:0-15) KCACHE1(CB1:0-15) 
      0  x: MOV         R3.x,  KC1[6].x      
         y: MOV         R3.y,  KC1[6].y      
         t: MULLO_INT   ____,  R1.x,  KC0[1].x      
      1  z: MOV         R3.z,  KC1[6].z      
         w: ADD_INT     ____,  R0.x,  PS0      
         t: MULLO_INT   ____,  R1.y,  KC0[1].y      
      2  x: ADD_INT     R0.x,  PV1.w,  KC0[6].x      
         z: ADD_INT     ____,  R0.y,  PS1      
         t: MULLO_INT   ____,  R1.z,  KC0[1].z      
      3  x: SETGT_INT   T0.x,  KC1[5].x,  PV2.x      
         y: ADD_INT     R0.y,  PV2.z,  KC0[6].y      
         z: ADD_INT     ____,  R0.z,  PS2      
      4  z: ADD_INT     R0.z,  PV3.z,  KC0[6].z      
         w: SETGT_INT   ____,  KC1[5].y,  PV3.y      
      5  z: AND_INT     ____,  T0.x,  PV4.w      
         w: MOV         R3.w,  KC1[6].w      
      6  y: AND_INT     ____,  PV5.z,  1      
      7  x: BFE_INT     R123.x,  PV6.y,  0.0f,  (0x00000008, 1.121038771e-44f).x      
      8  w: SETE_INT    R0.w,  PV7.x,  0.0f      
      9  x: PREDE_INT   ____,  R0.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
01 JUMP  POP_CNT(1) ADDR(71) 
02 ALU_PUSH_BEFORE: ADDR(117) CNT(2) KCACHE0(CB1:0-15) 
     10  w: SETGE_INT   R0.w,  R0.z,  KC0[5].z      
     11  x: PREDE_INT   ____,  R0.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
03 JUMP  POP_CNT(2) ADDR(71) 
04 ALU_PUSH_BEFORE: ADDR(119) CNT(11) KCACHE0(CB1:0-15) 
     12  t: MULLO_INT   T0.y,  KC0[5].y,  KC0[5].x      
     13  x: ADD_INT     R4.x,  R0.x,  KC0[4].x      
         t: MULLO_INT   ____,  R0.y,  KC0[5].x      
     14  y: ADD_INT     R4.y,  R0.y,  KC0[4].y      
         z: ADD_INT     ____,  R0.x,  PS13      
         t: MULLO_INT   ____,  T0.y,  R0.z      
     15  y: ADD_INT     ____,  PS14,  PV14.z      
         z: ADD_INT     R4.z,  R0.z,  KC0[4].z      
     16  t: MULLO_INT   ____,  PV15.y,  KC0[6].z      
     17  w: ADD_INT     R0.w,  KC0[4].x,  PS16      
     18  x: PREDE_INT   ____,  KC0[6].x,  1      UPDATE_EXEC_MASK UPDATE_PRED 
05 JUMP  ADDR(24) 
06 ALU_PUSH_BEFORE: ADDR(130) CNT(5) KCACHE0(CB1:0-15) 
     19  y: MOV         R3.y,  0.0f      
         z: MOV         R3.z,  0.0f      
         w: MOV         R3.w,  0.0f      
     20  x: PREDE_INT   ____,  KC0[6].y,  (0x00000004, 5.605193857e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
07 JUMP  ADDR(11) 
08 ALU: ADDR(135) CNT(5) KCACHE0(CB1:0-15) 
     21  w: LSHL        ____,  R0.w,  (0x00000002, 2.802596929e-45f).x      
     22  z: ADD_INT     ____,  KC0[0].x,  PV21.w      
     23  x: LSHR        R0.x,  PV22.z,  (0x00000002, 2.802596929e-45f).x      
09 TEX: ADDR(304) CNT(1) 
     24  VFETCH R0._x__, R0.x, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
10 ALU: ADDR(140) CNT(4) 
     25  x: MOV         R3.x,  R0.y      
         y: MOV         R3.y,  R0.y      
         z: MOV         R3.z,  R0.y      
         w: MOV         R3.w,  R0.y      
11 ELSE POP_CNT(1) ADDR(24) 
12 ALU_PUSH_BEFORE: ADDR(144) CNT(2) KCACHE0(CB1:0-15) 
     26  x: PREDE_INT   ____,  KC0[6].y,  (0x00000002, 2.802596929e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
13 JUMP  ADDR(17) 
14 ALU: ADDR(146) CNT(8) KCACHE0(CB1:0-15) 
     27  x: LSHL        ____,  R0.w,  1      
     28  y: ADD_INT     ____,  KC0[0].x,  PV27.x      
     29  x: AND_INT     ____,  (0xFFFFFFFC, -1.#QNANf).x,  PV28.y      
         w: AND_INT     ____,  PV28.y,  (0x00000003, 4.203895393e-45f).y      
     30  x: ASHR        R0.x,  PV29.w,  1      
         z: LSHR        R0.z,  PV29.x,  (0x00000002, 2.802596929e-45f).x      
15 TEX: ADDR(306) CNT(1) 
     31  VFETCH R0._x__, R0.z, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
16 ALU: ADDR(154) CNT(9) 
     32  w: CNDE_INT    R123.w,  R0.x,  0.0f,  (0x00000010, 2.242077543e-44f).x      
     33  y: ASHR        ____,  R0.y,  PV32.w      
     34  x: AND_INT     ____,  PV33.y,  (0x0000FFFF, 9.183409486e-41f).x      
     35  x: MOV         R3.x,  PV34.x      
         y: MOV         R3.y,  PV34.x      
         z: MOV         R3.z,  PV34.x      
         w: MOV         R3.w,  PV34.x      
17 ELSE POP_CNT(1) ADDR(23) 
18 ALU_PUSH_BEFORE: ADDR(163) CNT(2) KCACHE0(CB1:0-15) 
     36  x: SETNE_INT   R3.x,  KC0[6].y,  1      
     37  x: PREDE_INT   ____,  R3.x,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
19 JUMP  POP_CNT(3) ADDR(24) 
20 ALU: ADDR(165) CNT(9) KCACHE0(CB1:0-15) 
     38  y: ADD_INT     ____,  KC0[0].x,  R0.w      
     39  z: AND_INT     ____,  (0xFFFFFFFC, -1.#QNANf).x,  PV38.y      
         w: AND_INT     ____,  PV38.y,  (0x00000003, 4.203895393e-45f).y      
     40  x: MOV         R0.x,  PV39.w      
         y: ADD_INT     R0.y,  -1,  PV39.w      
         z: LSHR        R0.z,  PV39.z,  (0x00000002, 2.802596929e-45f).x      
         w: ADD_INT     R0.w,  (0xFFFFFFFE, -1.#QNANf).y,  PV39.w      
21 TEX: ADDR(308) CNT(1) 
     41  VFETCH R1._x__, R0.z, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
22 ALU_POP2_AFTER: ADDR(174) CNT(13) 
     42  z: CNDE_INT    R123.z,  R0.x,  0.0f,  (0x00000018, 3.363116314e-44f).x      
     43  x: CNDE_INT    R123.x,  R0.y,  (0x00000008, 1.121038771e-44f).x,  PV42.z      
     44  w: CNDE_INT    R123.w,  R0.w,  (0x00000010, 2.242077543e-44f).x,  PV43.x      
     45  y: ASHR        ____,  R1.y,  PV44.w      
     46  x: AND_INT     ____,  PV45.y,  (0x000000FF, 3.573311084e-43f).x      
     47  x: MOV         R3.x,  PV46.x      
         y: MOV         R3.y,  PV46.x      
         z: MOV         R3.z,  PV46.x      
         w: MOV         R3.w,  PV46.x      
23 POP (1) ADDR(24) 
24 ELSE POP_CNT(1) ADDR(69) 
25 ALU_PUSH_BEFORE: ADDR(187) CNT(2) KCACHE0(CB1:0-15) 
     48  x: PREDE_INT   ____,  KC0[6].x,  (0x00000002, 2.802596929e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
26 JUMP  ADDR(45) 
27 ALU_PUSH_BEFORE: ADDR(189) CNT(5) KCACHE0(CB1:0-15) 
     49  y: MOV         R3.y,  0.0f      
         z: MOV         R3.z,  0.0f      
         w: MOV         R3.w,  0.0f      
     50  x: PREDE_INT   ____,  KC0[6].y,  (0x00000004, 5.605193857e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
28 JUMP  ADDR(32) 
29 ALU: ADDR(194) CNT(8) KCACHE0(CB1:0-15) 
     51  x: LSHL        ____,  R0.w,  (0x00000002, 2.802596929e-45f).x      
     52  z: ADD_INT     ____,  KC0[0].x,  PV51.x      
     53  x: LSHR        R0.x,  PV52.z,  (0x00000002, 2.802596929e-45f).x      
         y: ADD_INT     ____,  PV52.z,  (0x00000004, 5.605193857e-45f).y      
     54  w: LSHR        R0.w,  PV53.y,  (0x00000002, 2.802596929e-45f).x      
30 TEX: ADDR(310) CNT(2) 
     55  VFETCH R0.__x_, R0.w, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
     56  VFETCH R0._x__, R0.x, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
31 ALU: ADDR(202) CNT(4) 
     57  x: MOV         R3.x,  R0.y      
         y: MOV         R3.y,  R0.z      
         z: MOV         R3.z,  R0.y      
         w: MOV         R3.w,  R0.y      
32 ELSE POP_CNT(1) ADDR(45) 
33 ALU_PUSH_BEFORE: ADDR(206) CNT(2) KCACHE0(CB1:0-15) 
     58  x: PREDE_INT   ____,  KC0[6].y,  (0x00000002, 2.802596929e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
34 JUMP  ADDR(38) 
35 ALU: ADDR(208) CNT(5) KCACHE0(CB1:0-15) 
     59  y: LSHL        ____,  R0.w,  (0x00000002, 2.802596929e-45f).x      
     60  w: ADD_INT     ____,  KC0[0].x,  PV59.y      
     61  z: LSHR        R0.z,  PV60.w,  (0x00000002, 2.802596929e-45f).x      
36 TEX: ADDR(314) CNT(1) 
     62  VFETCH R0._x__, R0.z, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
37 ALU: ADDR(213) CNT(7) 
     63  x: AND_INT     ____,  R0.y,  (0x0000FFFF, 9.183409486e-41f).x      
     64  x: MOV         R3.x,  PV63.x      
         y: LSHR        R3.y,  R0.y,  (0x00000010, 2.242077543e-44f).x      
         z: MOV         R3.z,  PV63.x      
         w: MOV         R3.w,  PV63.x      
38 ELSE POP_CNT(1) ADDR(44) 
39 ALU_PUSH_BEFORE: ADDR(220) CNT(2) KCACHE0(CB1:0-15) 
     65  x: SETNE_INT   R3.x,  KC0[6].y,  1      
     66  x: PREDE_INT   ____,  R3.x,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
40 JUMP  POP_CNT(3) ADDR(45) 
41 ALU: ADDR(222) CNT(8) KCACHE0(CB1:0-15) 
     67  z: LSHL        ____,  R0.w,  1      
     68  x: ADD_INT     ____,  KC0[0].x,  PV67.z      
     69  y: AND_INT     ____,  PV68.x,  (0x00000003, 4.203895393e-45f).x      
         z: AND_INT     ____,  (0xFFFFFFFC, -1.#QNANf).y,  PV68.x      
     70  x: ASHR        R0.x,  PV69.y,  1      
         w: LSHR        R0.w,  PV69.z,  (0x00000002, 2.802596929e-45f).x      
42 TEX: ADDR(316) CNT(1) 
     71  VFETCH R0._x__, R0.w, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
43 ALU_POP2_AFTER: ADDR(230) CNT(11) 
     72  x: CNDE_INT    R123.x,  R0.x,  0.0f,  (0x00000010, 2.242077543e-44f).x      
     73  z: ASHR        ____,  R0.y,  PV72.x      
     74  x: AND_INT     ____,  PV73.z,  (0x000000FF, 3.573311084e-43f).x      
         y: AND_INT     ____,  PV73.z,  (0x0000FFFF, 9.183409486e-41f).y      
     75  x: MOV         R3.x,  PV74.x      
         y: LSHR        R3.y,  PV74.y,  (0x00000008, 1.121038771e-44f).x      
         z: MOV         R3.z,  PV74.x      
         w: MOV         R3.w,  PV74.x      
44 POP (1) ADDR(45) 
45 ELSE POP_CNT(1) ADDR(68) 
46 ALU_PUSH_BEFORE: ADDR(241) CNT(2) KCACHE0(CB1:0-15) 
     76  x: PREDE_INT   ____,  KC0[6].x,  (0x00000004, 5.605193857e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
47 JUMP  POP_CNT(3) ADDR(69) 
48 ALU_PUSH_BEFORE: ADDR(243) CNT(5) KCACHE0(CB1:0-15) 
     77  y: MOV         R3.y,  0.0f      
         z: MOV         R3.z,  0.0f      
         w: MOV         R3.w,  0.0f      
     78  x: PREDE_INT   ____,  KC0[6].y,  (0x00000004, 5.605193857e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
49 JUMP  ADDR(53) 
50 ALU: ADDR(248) CNT(13) KCACHE0(CB1:0-15) 
     79  z: LSHL        ____,  R0.w,  (0x00000002, 2.802596929e-45f).x      
     80  x: ADD_INT     ____,  KC0[0].x,  PV79.z      
     81  x: ADD_INT     ____,  PV80.x,  (0x00000008, 1.121038771e-44f).x      
         y: LSHR        R0.y,  PV80.x,  (0x00000002, 2.802596929e-45f).y      
         z: ADD_INT     ____,  PV80.x,  (0x00000004, 5.605193857e-45f).z      
         w: ADD_INT     ____,  PV80.x,  (0x0000000C, 1.681558157e-44f).w      
     82  x: LSHR        R0.x,  PV81.z,  (0x00000002, 2.802596929e-45f).x      
         z: LSHR        R0.z,  PV81.w,  (0x00000002, 2.802596929e-45f).x      
         w: LSHR        R0.w,  PV81.x,  (0x00000002, 2.802596929e-45f).x      
51 TEX: ADDR(318) CNT(4) 
     83  VFETCH R1._x__, R0.z, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
     84  VFETCH R2._x__, R0.w, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
     85  VFETCH R3._x__, R0.x, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
     86  VFETCH R3.x___, R0.y, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
52 ALU: ADDR(261) CNT(3) 
     87  y: MOV         R3.y,  R3.y      
         z: MOV         R3.z,  R2.y      VEC_120 
         w: MOV         R3.w,  R1.y      VEC_201 
53 ELSE ADDR(67) 
54 ALU_PUSH_BEFORE: ADDR(264) CNT(2) KCACHE0(CB1:0-15) 
     88  x: PREDE_INT   ____,  KC0[6].y,  (0x00000002, 2.802596929e-45f).x      UPDATE_EXEC_MASK UPDATE_PRED 
55 JUMP  ADDR(59) 
56 ALU: ADDR(266) CNT(8) KCACHE0(CB1:0-15) 
     89  x: LSHL        ____,  R0.w,  (0x00000002, 2.802596929e-45f).x      
     90  z: ADD_INT     ____,  KC0[0].x,  PV89.x      
     91  x: LSHR        R0.x,  PV90.z,  (0x00000002, 2.802596929e-45f).x      
         y: ADD_INT     ____,  PV90.z,  (0x00000004, 5.605193857e-45f).y      
     92  w: LSHR        R0.w,  PV91.y,  (0x00000002, 2.802596929e-45f).x      
57 TEX: ADDR(326) CNT(2) 
     93  VFETCH R0._x__, R0.w, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
     94  VFETCH R0.__x_, R0.x, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
58 ALU: ADDR(274) CNT(5) 
     95  x: AND_INT     R3.x,  R0.z,  (0x0000FFFF, 9.183409486e-41f).x      
         y: LSHR        R3.y,  R0.z,  (0x00000010, 2.242077543e-44f).y      
         z: AND_INT     R3.z,  R0.y,  (0x0000FFFF, 9.183409486e-41f).x      
         w: LSHR        R3.w,  R0.y,  (0x00000010, 2.242077543e-44f).y      
59 ELSE POP_CNT(1) ADDR(67) 
60 ALU: ADDR(279) CNT(1) KCACHE0(CB1:0-15) 
     96  x: SETNE_INT   R3.x,  KC0[6].y,  1      
61 PUSH ADDR(69) POP_CNT(5) 
62 ALU: ADDR(280) CNT(1) 
     97  x: PREDE_INT   ____,  R3.x,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
63 JUMP  POP_CNT(6) ADDR(69) 
64 ALU: ADDR(281) CNT(5) KCACHE0(CB1:0-15) 
     98  z: LSHL        ____,  R0.w,  (0x00000002, 2.802596929e-45f).x      
     99  y: ADD_INT     ____,  KC0[0].x,  PV98.z      
    100  x: LSHR        R0.x,  PV99.y,  (0x00000002, 2.802596929e-45f).x      
65 TEX: ADDR(330) CNT(1) 
    101  VFETCH R0.___x, R0.x, fc156  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
66 ALU_POP2_AFTER: ADDR(286) CNT(6) 
    102  x: AND_INT     R3.x,  R0.w,  (0x000000FF, 3.573311084e-43f).x      
         y: BFE_UINT    R3.y,  R0.w,  (0x00000008, 1.121038771e-44f).y,  (0x00000008, 1.121038771e-44f).y      
         z: BFE_UINT    R3.z,  R0.w,  (0x00000010, 2.242077543e-44f).z,  (0x00000008, 1.121038771e-44f).y      
         w: LSHR        R3.w,  R0.w,  (0x00000018, 3.363116314e-44f).w      
67 POP (3) ADDR(68) 
68 POP (1) ADDR(69) 
69 MEM_RAT_STORE_TYPED: RAT(0)[R4], R3,  MARK  VPM 
70 POP (2) ADDR(71) 
71 NOP NO_BARRIER 
END_OF_PROGRAM

; ----------------- CS Data ------------------------
; Input Semantic Mappings
;    No input mappings

GprPoolSize = 0
CodeLen                 = 2656;Bytes
PGM_END_CF              = 0; words(64 bit)
PGM_END_ALU             = 0; words(64 bit)
PGM_END_FETCH           = 0; words(64 bit)
MaxScratchRegsNeeded    = 0
;AluPacking              = 0.0
;AluClauses              = 0
;PowerThrottleRate       = 0.0
; texResourceUsage[0]     = 0x00000000
; texResourceUsage[1]     = 0x00000000
; texResourceUsage[2]     = 0x00000000
; texResourceUsage[3]     = 0x00000000
; fetch4ResourceUsage[0]  = 0x00000000
; fetch4ResourceUsage[1]  = 0x00000000
; fetch4ResourceUsage[2]  = 0x00000000
; fetch4ResourceUsage[3]  = 0x00000000
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000
ResourcesAffectAlphaOutput[0]  = 0x00000000
ResourcesAffectAlphaOutput[1]  = 0x00000000
ResourcesAffectAlphaOutput[2]  = 0x00000000
ResourcesAffectAlphaOutput[3]  = 0x00000000

;SQ_PGM_RESOURCES        = 0x30000205
SQ_PGM_RESOURCES:NUM_GPRS     = 5
SQ_PGM_RESOURCES:STACK_SIZE           = 2
SQ_PGM_RESOURCES:PRIME_CACHE_ENABLE   = 1
;SQ_PGM_RESOURCES_2      = 0x000000C0
SQ_LDS_ALLOC:SIZE        = 0x00000000
; RatOpIsUsed = 0x3
; NumThreadPerGroupFlattened = 128
; SetBufferForNumGroup = true
