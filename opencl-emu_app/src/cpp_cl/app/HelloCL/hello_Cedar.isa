ShaderType = IL_SHADER_COMPUTE
TargetChip = c
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
fConstantsAvailable = 0
iConstantsAvailable = 0
bConstantsAvailable = 0
u32SCOptions[0] = 0x01A00000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x00202000 SCOption_R600_ERROR_ON_DOUBLE_MEMEXP SCOption_SET_VPM_FOR_SCATTER
u32SCOptions[2] = 0x00000044 SCOption_R8XX_CF_ALU_STACK_ENTRY_WORKAROUND SCOption_R800_UAV_NONUAV_SYNC_WORKAROUND_BUG216513_1

; --------  Disassembly --------------------
00 ALU_PUSH_BEFORE: ADDR(64) CNT(12) KCACHE0(CB0:0-15) 
      0  x: ADD_INT     T0.x,  -1,  KC0[1].x      
         t: MOV         R3.x,  0.0f      
      1  x: ADD_INT     R5.x,  R1.x,  KC0[7].x      
         y: ADD_INT     R2.y,  R1.y,  KC0[7].y      
         t: MULLO_INT   ____,  R1.x,  KC0[1].x      
      2  w: ADD_INT     ____,  R0.x,  PS1      
         t: MULLO_INT   ____,  R1.y,  KC0[1].y      
      3  x: ADD_INT     R4.x,  PV2.w,  KC0[6].x      
         z: ADD_INT     ____,  R0.y,  PS2      
      4  y: ADD_INT     R1.y,  PV3.z,  KC0[6].y      
         w: SETNE_INT   R0.w,  PV3.x,  T0.x      
      5  x: PREDE_INT   ____,  R0.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
01 JUMP  POP_CNT(1) ADDR(58) 
02 ALU_PUSH_BEFORE: ADDR(76) CNT(2) KCACHE0(CB0:0-15) 
      6  w: ADD_INT     R0.w,  -1,  KC0[1].y      
      7  x: PREDE_INT   ____,  R1.y,  R0.w      UPDATE_EXEC_MASK UPDATE_PRED 
03 JUMP  POP_CNT(2) ADDR(58) 
04 ALU_PUSH_BEFORE: ADDR(78) CNT(2) KCACHE0(CB0:0-15) 
      8  w: SETE_INT    R0.w,  KC0[8].z,  0.0f      
      9  x: PREDE_INT   ____,  R0.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
05 JUMP  POP_CNT(1) ADDR(14) 
06 ALU: ADDR(80) CNT(10) KCACHE0(CB0:0-15) 
     10  t: MULLO_INT   ____,  R0.z,  KC0[1].y      
     11  x: ADD_INT     ____,  R0.y,  PS10      
     12  t: MULLO_INT   ____,  PV11.x,  KC0[1].x      
     13  y: ADD_INT     ____,  R0.x,  PS12      
     14  t: MULLO_INT   R0.w,  PV13.y,  KC0[8].z      
     15  z: LSHL        ____,  PS14,  (0x00000002, 2.802596929e-45f).x      
     16  y: ADD_INT     ____,  KC0[8].y,  PV15.z      
     17  x: LSHR        R6.x,  PV16.y,  (0x00000002, 2.802596929e-45f).x      
07 TEX: ADDR(192) CNT(1) 
     18  VFETCH R1.___x, R6.x, fc170  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
08 ALU_PUSH_BEFORE: ADDR(90) CNT(4) KCACHE0(CB0:0-15) 
     19  x: SUB_INT     ____,  KC0[8].z,  R1.w      
     20  z: SETGT_UINT  R1.z,  (0x00000002, 2.802596929e-45f).x,  PV19.x      
     21  x: PREDE_INT   ____,  R1.z,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
09 JUMP  POP_CNT(2) ADDR(14) 
10 ALU: ADDR(94) CNT(7) KCACHE0(CB0:0-15) 
     22  x: ADD_INT     R2.x,  R1.w,  1      
         w: ADD_INT     ____,  R0.w,  R1.w      VEC_120 
     23  z: LSHL        ____,  PV22.w,  (0x00000002, 2.802596929e-45f).x      
     24  y: ADD_INT     ____,  KC0[8].y,  PV23.z      
     25  x: LSHR        R1.x,  PV24.y,  (0x00000002, 2.802596929e-45f).x      
11 MEM_RAT_CACHELESS_STORE_RAW: RAT(8)[R1].x___, R3,  MARK  VPM 
12 MEM_RAT_CACHELESS_STORE_RAW_ACK: RAT(8)[R6].x___, R2,  MARK  VPM 
13 POP (2) ADDR(14) 
14 ALU_PUSH_BEFORE: ADDR(101) CNT(2) KCACHE0(CB0:0-15) 
     26  w: SETNE_INT   R2.w,  KC0[8].z,  0.0f      
     27  x: PREDNE_INT  ____,  R2.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
15 JUMP  POP_CNT(1) ADDR(25) 
16 ALU: ADDR(103) CNT(10) KCACHE0(CB0:0-15) 
     28  t: MULLO_INT   ____,  R0.z,  KC0[1].y      
     29  x: ADD_INT     ____,  R0.y,  PS28      
     30  t: MULLO_INT   ____,  PV29.x,  KC0[1].x      
     31  y: ADD_INT     ____,  R0.x,  PS30      
     32  t: MULLO_INT   R1.z,  PV31.y,  KC0[8].z      
     33  z: LSHL        ____,  PS32,  (0x00000002, 2.802596929e-45f).x      
     34  y: ADD_INT     ____,  KC0[8].y,  PV33.z      
     35  x: LSHR        R3.x,  PV34.y,  (0x00000002, 2.802596929e-45f).x      
17 WAIT_ACK:  Outstanding_acks <= 0 
18 TEX: ADDR(194) CNT(1) 
     36  VFETCH R0.___x, R3.x, fc170  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
19 ALU_PUSH_BEFORE: ADDR(113) CNT(4) KCACHE0(CB0:0-15) 
     37  x: SUB_INT     ____,  KC0[8].z,  R0.w      
     38  w: SETGT_UINT  R1.w,  (0x00000002, 2.802596929e-45f).x,  PV37.x      
     39  x: PREDE_INT   ____,  R1.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
20 JUMP  POP_CNT(2) ADDR(25) 
21 ALU: ADDR(117) CNT(7) KCACHE0(CB0:0-15) 
     40  x: ADD_INT     R2.x,  R0.w,  1      
         w: ADD_INT     ____,  R1.z,  R0.w      
     41  z: LSHL        ____,  PV40.w,  (0x00000002, 2.802596929e-45f).x      
     42  y: ADD_INT     ____,  KC0[8].y,  PV41.z      
     43  x: LSHR        R1.x,  PV42.y,  (0x00000002, 2.802596929e-45f).x      
22 MEM_RAT_CACHELESS_STORE_RAW: RAT(8)[R1].x___, R4,  MARK  VPM 
23 MEM_RAT_CACHELESS_STORE_RAW_ACK: RAT(8)[R3].x___, R2,  MARK  VPM 
24 POP (2) ADDR(25) 
25 ALU_PUSH_BEFORE: ADDR(124) CNT(1) 
     44  x: PREDNE_INT  ____,  R2.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
26 JUMP  POP_CNT(1) ADDR(36) 
27 ALU: ADDR(125) CNT(10) KCACHE0(CB0:0-15) 
     45  t: MULLO_INT   ____,  R0.z,  KC0[1].y      
     46  y: ADD_INT     ____,  R0.y,  PS45      
     47  t: MULLO_INT   ____,  PV46.y,  KC0[1].x      
     48  z: ADD_INT     ____,  R0.x,  PS47      
     49  t: MULLO_INT   R0.w,  PV48.z,  KC0[8].z      
     50  y: LSHL        ____,  PS49,  (0x00000002, 2.802596929e-45f).x      
     51  w: ADD_INT     ____,  KC0[8].y,  PV50.y      
     52  x: LSHR        R4.x,  PV51.w,  (0x00000002, 2.802596929e-45f).x      
28 WAIT_ACK:  Outstanding_acks <= 0 
29 TEX: ADDR(196) CNT(1) 
     53  VFETCH R1.__x_, R4.x, fc170  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
30 ALU_PUSH_BEFORE: ADDR(135) CNT(4) KCACHE0(CB0:0-15) 
     54  x: SUB_INT     ____,  KC0[8].z,  R1.z      
     55  y: SETGT_UINT  R3.y,  (0x00000002, 2.802596929e-45f).x,  PV54.x      
     56  x: PREDE_INT   ____,  R3.y,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
31 JUMP  POP_CNT(2) ADDR(36) 
32 ALU: ADDR(139) CNT(8) KCACHE0(CB0:0-15) 
     57  x: MOV         R1.x,  R1.y      
         w: ADD_INT     ____,  R0.w,  R1.z      
         t: ADD_INT     R3.x,  R1.z,  1      
     58  z: LSHL        ____,  PV57.w,  (0x00000002, 2.802596929e-45f).x      
     59  y: ADD_INT     ____,  KC0[8].y,  PV58.z      
     60  x: LSHR        R2.x,  PV59.y,  (0x00000002, 2.802596929e-45f).x      
33 MEM_RAT_CACHELESS_STORE_RAW: RAT(8)[R2].x___, R1,  MARK  VPM 
34 MEM_RAT_CACHELESS_STORE_RAW_ACK: RAT(8)[R4].x___, R3,  MARK  VPM 
35 POP (2) ADDR(36) 
36 ALU_PUSH_BEFORE: ADDR(147) CNT(1) 
     61  x: PREDNE_INT  ____,  R2.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
37 JUMP  POP_CNT(1) ADDR(47) 
38 ALU: ADDR(148) CNT(10) KCACHE0(CB0:0-15) 
     62  t: MULLO_INT   ____,  R0.z,  KC0[1].y      
     63  y: ADD_INT     ____,  R0.y,  PS62      
     64  t: MULLO_INT   ____,  PV63.y,  KC0[1].x      
     65  w: ADD_INT     ____,  R0.x,  PS64      
     66  t: MULLO_INT   R1.y,  PV65.w,  KC0[8].z      
     67  z: LSHL        ____,  PS66,  (0x00000002, 2.802596929e-45f).x      
     68  y: ADD_INT     ____,  KC0[8].y,  PV67.z      
     69  x: LSHR        R3.x,  PV68.y,  (0x00000002, 2.802596929e-45f).x      
39 WAIT_ACK:  Outstanding_acks <= 0 
40 TEX: ADDR(198) CNT(1) 
     70  VFETCH R0.___x, R3.x, fc170  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
41 ALU_PUSH_BEFORE: ADDR(158) CNT(4) KCACHE0(CB0:0-15) 
     71  x: SUB_INT     ____,  KC0[8].z,  R0.w      
     72  z: SETGT_UINT  R1.z,  (0x00000002, 2.802596929e-45f).x,  PV71.x      
     73  x: PREDE_INT   ____,  R1.z,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
42 JUMP  POP_CNT(2) ADDR(47) 
43 ALU: ADDR(162) CNT(7) KCACHE0(CB0:0-15) 
     74  x: ADD_INT     R2.x,  R0.w,  1      
         w: ADD_INT     ____,  R1.y,  R0.w      
     75  z: LSHL        ____,  PV74.w,  (0x00000002, 2.802596929e-45f).x      
     76  y: ADD_INT     ____,  KC0[8].y,  PV75.z      
     77  x: LSHR        R1.x,  PV76.y,  (0x00000002, 2.802596929e-45f).x      
44 MEM_RAT_CACHELESS_STORE_RAW: RAT(8)[R1].x___, R5,  MARK  VPM 
45 MEM_RAT_CACHELESS_STORE_RAW_ACK: RAT(8)[R3].x___, R2,  MARK  VPM 
46 POP (2) ADDR(47) 
47 ALU_PUSH_BEFORE: ADDR(169) CNT(1) 
     78  x: PREDNE_INT  ____,  R2.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
48 JUMP  POP_CNT(3) ADDR(58) 
49 ALU: ADDR(170) CNT(10) KCACHE0(CB0:0-15) 
     79  t: MULLO_INT   ____,  R0.z,  KC0[1].y      
     80  y: ADD_INT     ____,  R0.y,  PS79      
     81  t: MULLO_INT   ____,  PV80.y,  KC0[1].x      
     82  w: ADD_INT     ____,  R0.x,  PS81      
     83  t: MULLO_INT   R0.y,  PV82.w,  KC0[8].z      
     84  z: LSHL        ____,  PS83,  (0x00000002, 2.802596929e-45f).x      
     85  y: ADD_INT     ____,  KC0[8].y,  PV84.z      
     86  x: LSHR        R3.x,  PV85.y,  (0x00000002, 2.802596929e-45f).x      
50 WAIT_ACK:  Outstanding_acks <= 0 
51 TEX: ADDR(200) CNT(1) 
     87  VFETCH R0.__x_, R3.x, fc170  MEGA(4) 
         FETCH_TYPE(NO_INDEX_OFFSET) 
52 ALU_PUSH_BEFORE: ADDR(180) CNT(4) KCACHE0(CB0:0-15) 
     88  x: SUB_INT     ____,  KC0[8].z,  R0.z      
     89  w: SETGT_UINT  R0.w,  (0x00000002, 2.802596929e-45f).x,  PV88.x      
     90  x: PREDE_INT   ____,  R0.w,  0.0f      UPDATE_EXEC_MASK UPDATE_PRED 
53 JUMP  POP_CNT(4) ADDR(58) 
54 ALU: ADDR(184) CNT(8) KCACHE0(CB0:0-15) 
     91  x: MOV         R0.x,  R2.y      
         w: ADD_INT     ____,  R0.y,  R0.z      VEC_120 
         t: ADD_INT     R2.x,  R0.z,  1      
     92  z: LSHL        ____,  PV91.w,  (0x00000002, 2.802596929e-45f).x      
     93  y: ADD_INT     ____,  KC0[8].y,  PV92.z      
     94  x: LSHR        R1.x,  PV93.y,  (0x00000002, 2.802596929e-45f).x      
55 MEM_RAT_CACHELESS_STORE_RAW: RAT(8)[R1].x___, R0,  MARK  VPM 
56 MEM_RAT_CACHELESS_STORE_RAW: RAT(8)[R3].x___, R2,  MARK  VPM 
57 POP (4) ADDR(58) 
58 NOP NO_BARRIER 
END_OF_PROGRAM

; ----------------- CS Data ------------------------
; Input Semantic Mappings
;    No input mappings

GprPoolSize = 0
CodeLen                 = 1616;Bytes
PGM_END_CF              = 0; words(64 bit)
PGM_END_ALU             = 0; words(64 bit)
PGM_END_FETCH           = 0; words(64 bit)
MaxScratchRegsNeeded    = 0
;AluPacking              = 0.0
;AluClauses              = 0
;PowerThrottleRate       = 0.0
; texResourceUsage[0]     = 0x00000000
; texResourceUsage[1]     = 0x00000000
; texResourceUsage[2]     = 0x00000000
; texResourceUsage[3]     = 0x00000000
; fetch4ResourceUsage[0]  = 0x00000000
; fetch4ResourceUsage[1]  = 0x00000000
; fetch4ResourceUsage[2]  = 0x00000000
; fetch4ResourceUsage[3]  = 0x00000000
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000
ResourcesAffectAlphaOutput[0]  = 0x00000000
ResourcesAffectAlphaOutput[1]  = 0x00000000
ResourcesAffectAlphaOutput[2]  = 0x00000000
ResourcesAffectAlphaOutput[3]  = 0x00000000

;SQ_PGM_RESOURCES        = 0x30000107
SQ_PGM_RESOURCES:NUM_GPRS     = 7
SQ_PGM_RESOURCES:STACK_SIZE           = 1
SQ_PGM_RESOURCES:PRIME_CACHE_ENABLE   = 1
;SQ_PGM_RESOURCES_2      = 0x000000C0
SQ_LDS_ALLOC:SIZE        = 0x00000000
; RatOpIsUsed = 0x100
; NumThreadPerGroupFlattened = 128
; SetBufferForNumGroup = true
